from flask import Flask, request
from twilio.twiml.messaging_response import MessagingResponse
import firebase_admin
from firebase_admin import credentials, firestore
import re
from datetime import datetime
import json
import os

app = Flask(__name__)

# Firebase
firebase_config = json.loads(os.environ["FIREBASE_CREDENTIALS"])
cred = credentials.Certificate(firebase_config)
firebase_admin.initialize_app(cred)

# Sessions
sessions = {}

languages = {"1": "hindi", "2": "gujarati"}
language_texts = {
    "hindi": {
        "welcome": "ЁЯЩП рд╕реНрд╡рд╛рдЧрдд рд╣реИ!\nрдХреГрдкрдпрд╛ рднрд╛рд╖рд╛ рдЪреБрдиреЗрдВ:\n1. рд╣рд┐рдиреНрджреА\n2. ркЧрлБркЬрк░рк╛ркдрлА",
        "products_intro": "ЁЯУж рдЙрдкрд▓рдмреНрдз рдЙрддреНрдкрд╛рдж:\n\n",
        "enter_products": "рдХреГрдкрдпрд╛ рдЙрддреНрдкрд╛рдж рдФрд░ рдорд╛рддреНрд░рд╛ рднреЗрдЬреЗрдВ (рдЬреИрд╕реЗ: рдкреНрд▓реЗрдЯ 100, рдХрдк 50)",
        "ask_days": "рдХрд┐рддрдиреЗ рджрд┐рдиреЛрдВ рдореЗрдВ рдбрд┐рд▓реАрд╡рд░реА рдЪрд╛рд╣рд┐рдП? (рдЬреИрд╕реЗ: 2)",
        "order_summary": "ЁЯз╛ рдСрд░реНрдбрд░ рд╕рд╛рд░рд╛рдВрд╢:\n",
        "thanks": "рдзрдиреНрдпрд╡рд╛рдж! рдЖрдкрдХрд╛ рдСрд░реНрдбрд░ рд░рд┐рдХреЙрд░реНрдб рдХрд░ рд▓рд┐рдпрд╛ рдЧрдпрд╛ рд╣реИред",
        "invalid_lang": "тЭЧрдХреГрдкрдпрд╛ 1 рдпрд╛ 2 рдореЗрдВ рд╕реЗ рдЪреБрдиреЗрдВред"
    },
    "gujarati": {
        "welcome": "ЁЯЩП рк╕рлНрк╡рк╛ркЧркд ркЫрлЗ!\nркХрлГрккрк╛ ркХрк░рлАркирлЗ ркнрк╛рк╖рк╛ рккрк╕ркВркж ркХрк░рлЛ:\n1. рд╣рд┐рдиреНрджреА\n2. ркЧрлБркЬрк░рк╛ркдрлА",
        "products_intro": "ЁЯУж ркЙрккрк▓ркмрлНркз ркЙркдрлНрккрк╛ркжркирлЛ:\n\n",
        "enter_products": "ркХрлГрккрк╛ ркХрк░рлАркирлЗ ркЙркдрлНрккрк╛ркжрки ркЕркирлЗ ркорк╛ркдрлНрк░рк╛ рк▓ркЦрлЛ (ркЬрлЗрко ркХрлЗ: рккрлНрк▓рлЗркЯ 100, ркХркк 50)",
        "ask_days": "ркХрлЗркЯрк▓рк╛ ркжрк┐рк╡рк╕ркорк╛ркВ ркбрк┐рк▓рк┐рк╡рк░рлА ркЬрлЛркИркдрлА ркЫрлЗ? (ркЬрлЗрко ркХрлЗ: 2)",
        "order_summary": "ЁЯз╛ ркУрк░рлНркбрк░ рк╕рк░рк╛ркВрк╢:\n",
        "thanks": "ркЖркнрк╛рк░! ркдркорк╛рк░рлБркВ ркУрк░рлНркбрк░ ркирлЛркВркзрк╛ркИ ркЧркпрлБркВ ркЫрлЗ.",
        "invalid_lang": "тЭЧркорлЗрк╣рк░ркмрк╛ркирлА ркХрк░рлАркирлЗ 1 ркЕркерк╡рк╛ 2 рккрк╕ркВркж ркХрк░рлЛ."
    }
}

@app.route("/whatsapp", methods=["POST"])
def whatsapp_bot():
    incoming_msg = request.values.get("Body", "").strip()
    sender = request.values.get("From", "").strip()
    resp = MessagingResponse()
    msg = resp.message()

    if sender not in sessions:
        sessions[sender] = {"stage": "language"}
        msg.body(language_texts["hindi"]["welcome"])
        return str(resp)

    session = sessions[sender]
    lang = session.get("language", "hindi")
    texts = language_texts[lang]

    if session["stage"] == "language":
        if incoming_msg in languages:
            lang = languages[incoming_msg]
            session["language"] = lang
            session["stage"] = "show_products"
            return show_products(msg, sender, lang)
        else:
            msg.body(texts["invalid_lang"])
            return str(resp)

    elif session["stage"] == "show_products":
        return ask_for_products(msg, sender, lang)

    elif session["stage"] == "order_input":
        session["order"] = parse_products(incoming_msg)
        session["stage"] = "delivery_time"
        msg.body(texts["ask_days"])
        return str(resp)

    elif session["stage"] == "delivery_time":
        session["delivery_days"] = incoming_msg
        return summarize_order(msg, sender, lang)

    msg.body("рдХреГрдкрдпрд╛ рдлрд┐рд░ рд╕реЗ рдкреНрд░рдпрд╛рд╕ рдХрд░реЗрдВред")
    return str(resp)

def show_products(msg, sender, lang):
    texts = language_texts[lang]
    products = db.collection("products").stream()
    response = texts["products_intro"]
    for p in products:
        data = p.to_dict()
        response += f"ЁЯз╛ {data['name']}\nЁЯТ░ тВ╣{data['price']} рдкреНрд░рддрд┐ рдпреВрдирд┐рдЯ\n\n"
    response += texts["enter_products"]
    sessions[sender]["stage"] = "order_input"
    msg.body(response)
    return str(msg)

def ask_for_products(msg, sender, lang):
    sessions[sender]["stage"] = "order_input"
    msg.body(language_texts[lang]["enter_products"])
    return str(msg)

def parse_products(text):
    items = {}
    matches = re.findall(r'([^\d\s,]+)\s*(\d+)', text)
    for name, qty in matches:
        items[name.strip().lower()] = int(qty)
    return items

def summarize_order(msg, sender, lang):
    order = sessions[sender]["order"]
    delivery_days = sessions[sender]["delivery_days"]
    texts = language_texts[lang]

    products_ref = db.collection("products").stream()
    product_db = {p.to_dict()["name"].strip().lower(): p.to_dict() for p in products_ref}

    summary = texts["order_summary"]
    total = 0
    for name, qty in order.items():
        if name in product_db:
            price = product_db[name]["price"]
            amount = qty * price
            summary += f"{name} - {qty} ├Ч тВ╣{price} = тВ╣{amount}\n"
            total += amount
        else:
            summary += f"{name} - тЭМ рдЙрддреНрдкрд╛рдж рдирд╣реАрдВ рдорд┐рд▓рд╛\n"

    summary += f"\nЁЯХТ рдбрд┐рд▓реАрд╡рд░реА: {delivery_days} рджрд┐рди рдореЗрдВ\nЁЯТ░ рдХреБрд▓: тВ╣{total}\n\n"
    summary += texts["thanks"]

    db.collection("orders").add({
        "sender": sender,
        "language": lang,
        "order": order,
        "delivery_days": delivery_days,
        "total": total,
        "timestamp": datetime.now()
    })

    sessions.pop(sender)
    msg.body(summary)
    return str(msg)

if __name__ == "__main__":
    app.run(debug=True)
